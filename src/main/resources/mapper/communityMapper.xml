<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- type에는 사용하려는 domain의 경로를 적어여한다. -->
<mapper namespace="com.example.sstv.community.DAO.CommunityDAO">


    <resultMap id="communitySelectMap" type="com.example.sstv.community.Community">
        <result property="writingNo" 		column="writing_no" 			jdbcType="NUMERIC" />
        <result property="hostUserId" 		column="host_user_id" 			jdbcType="VARCHAR" />
        <result property="guestUserId" 		column="guest_user_id" 			jdbcType="VARCHAR" />
        <result property="title" 		column="title" 			jdbcType="VARCHAR" />
        <result property="regDate" 		column="reg_date" 			jdbcType="TIMESTAMP" />
        <result property="content" 		column="content" 			jdbcType="VARCHAR" />
        <result property="commentCount" column="comment_count"      jdbcType="NUMERIC" />

        <collection property="comments" ofType="com.example.sstv.community.Comments">
            <result property="commentsNo" 		column="comments_no" 			jdbcType="NUMERIC" />
            <result property="commentsUserId" 		column="comments_user_id" 			jdbcType="VARCHAR" />
            <result property="writingNo" 		column="writing_No" 			jdbcType="NUMERIC" />
            <result property="replayNo" 		column="replay_no" 			jdbcType="NUMERIC" />
            <result property="commentContent" 		column="comment_content" 			jdbcType="VARCHAR" />
            <result property="regDate" 		column="reg_date" 			jdbcType="TIMESTAMP" />
        </collection>



    </resultMap>

    <resultMap id="commentsSelectMap" type="com.example.sstv.community.Comments">
        <result property="commentsNo" 		column="comments_no" 			jdbcType="NUMERIC" />
        <result property="commentsUserId" 		column="comments_user_id" 			jdbcType="VARCHAR" />
        <result property="writingNo" 		column="writing_No" 			jdbcType="NUMERIC" />
        <result property="replayNo" 		column="replay_no" 			jdbcType="NUMERIC" />
        <result property="commentContent" 		column="comment_content" 			jdbcType="VARCHAR" />
        <result property="regDate" 		column="reg_date" 			jdbcType="TIMESTAMP" />

    </resultMap>





    <select 	id="getWriting"	parameterType="com.example.sstv.community.Community"	resultMap="communitySelectMap">
        select *
        FROM WRITING
        LEFT JOIN COMMENTS ON WRITING.writing_no = COMMENTS.writing_no
        WHERE WRITING.WRITING_NO = #{writingNo}
    </select>

<!--    <select 	id="getWritingList"	parameterType="com.example.sstv.community.Community"	resultMap="communitySelectMap">-->


<!--        SELECT WRITING.*, COUNT(COMMENTS.writing_no) AS comment_count-->
<!--        FROM WRITING-->
<!--        LEFT JOIN COMMENTS ON WRITING.writing_no = COMMENTS.writing_no-->
<!--        GROUP BY WRITING.writing_no-->
<!--        ORDER BY reg_date desc;-->
<!--    </select>-->

    <select id="getWritingList" parameterType="com.example.sstv.community.Community" resultMap="communitySelectMap">
        SELECT WRITING.*, COUNT(COMMENTS.writing_no) AS comment_count
        FROM WRITING
        LEFT JOIN COMMENTS ON WRITING.writing_no = COMMENTS.writing_no
        WHERE host_user_id = #{hostUserId}
        GROUP BY WRITING.writing_no
        ORDER BY reg_date desc
    </select>

    <select id="getWritingCount"	resultType="int">
        SELECT
        COUNT(*) AS writing_no
        FROM WRITING
        WHERE host_user_id = #{hostUserId}
    </select>

    <delete  id="deleteWriting" >
        DELETE from WRITING  where writing_no = #{writing_no}
    </delete>

    <update id="updateWriting" parameterType="com.example.sstv.community.Community">
        UPDATE WRITING
        SET title = #{title},
        content = #{content}
        WHERE writing_no = #{writingNo}
    </update>

    <insert id="addWriting" parameterType="com.example.sstv.community.Community">
        INSERT INTO WRITING ( HOST_USER_ID, GUEST_USER_ID, TITLE, REG_DATE, CONTENT )
        VALUES
        ( #{hostUserId}, #{guestUserId}, #{title}, CURRENT_TIMESTAMP(), #{content} )
    </insert>

    <insert id="addWritingNotice" parameterType="com.example.sstv.community.Community">
        INSERT INTO WRITING ( HOST_USER_ID, GUEST_USER_ID, TITLE, REG_DATE, CONTENT, NOTICE )
        VALUES
        ( #{hostUserId}, #{guestUserId}, #{title}, CURRENT_TIMESTAMP(), #{content}, CURRENT_TIMESTAMP() )
    </insert>

    <insert id="addComments" parameterType="com.example.sstv.community.Comments">
        INSERT INTO COMMENTS ( comments_user_id, writing_no, replay_no, comment_content, reg_date )
        VALUES
        ( #{commentsUserId}, #{writingNo}, #{replayNo}, #{commentContent}, CURRENT_TIMESTAMP() )
    </insert>

    <select 	id="getCommentsList"	parameterType="com.example.sstv.community.Comments"	resultMap="commentsSelectMap">
        SELECT
        *
        FROM COMMENTS
        WHERE writing_no = #{writing_no}
    </select>

    <delete  id="deleteComments" >
        DELETE from COMMENTS where comments_no = #{comments_no}
    </delete>

    <select id="getSearchWriting" parameterType="com.example.sstv.common.Search" resultMap="communitySelectMap">
        SELECT WRITING.*, COUNT(COMMENTS.writing_no) AS comment_count
        FROM WRITING
        LEFT JOIN COMMENTS ON WRITING.writing_no = COMMENTS.writing_no
        WHERE WRITING.title LIKE CONCAT('%', #{searchKeyword}, '%')
        OR WRITING.content LIKE CONCAT('%', #{searchKeyword}, '%')
        GROUP BY WRITING.writing_no
        ORDER BY WRITING.reg_date DESC
    </select>

</mapper>